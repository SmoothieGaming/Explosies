<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
acc = 1;
frict = acc/2;
jump_height = acc*25;
spd = room_speed*0.1;
grav = room_speed*0.02;
hp = 3;
max_jump_frames = 10;

xv = 0;
yv = 0;
standing = 0;
jump_frames = 0;

//phisics stuff


//initialize controls
bt_right = ord('D');
bt_left = ord('A');
bt_up = ord('W');
bt_down = ord('S');

//create light source at player;
player_light = instance_create(x, y, obj_light);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics based movement
//don't execute if game is paused
if pause{
    exit;
}

//check for player input
var x_input = keyboard_check(bt_right) - keyboard_check(bt_left);
var y_input = keyboard_check(bt_down) - keyboard_check(bt_up);

//check for adjecent wall
wall = 0;
if y_input != 1{
    if place_meeting(x + 1, y, par_collide){
    wall = 1
    }else if place_meeting(x - 1, y, par_collide){
    wall = -1
    }
}

// check if sliding
var sliding;
sliding = false;
if standing &amp;&amp; y_input = 1{
    sliding = true;
}
  
//calculate xv and yv
if !sliding{
    physics_apply_impulse(x, y, 10*x_input, 0);
}
/*   
xv = clamp(xv, -spd, spd);

//apply friction
if sliding{
    xv -= sign(xv)*frict* 0.5;
}else{
    xv -= sign(xv)*frict;
}
if abs(xv) &lt; frict{
    xv = 0;
}

//aply gravity
if wall != 0 &amp;&amp; yv &gt; 0 {
    yv = 0
    yv += grav;
}else{
    yv += grav;
}
*/
//decrease jump frames
jump_frames -= 1; 

//jump
if y_input == -1 {
    if standing &amp;&amp; keyboard_check_pressed(bt_up){
        jump_frames = max_jump_frames;
        physics_apply_impulse(x, y, 0, jump_height);
    }else if wall != 0 &amp;&amp; keyboard_check_pressed(bt_up){
        jump_frames = max_jump_frames;
        physics_apply_impulse(x, y, wall*spd, jump_height);
    }else if jump_frames &gt; 0{
        physics_apply_impulse(x, y, 0, jump_height);
    }
}
//reset standing
standing = place_meeting(x, y +1, par_collide);
/*
// check for collision

if place_meeting(x + xv, y, par_collide){
    while !place_meeting(x + sign(xv), y, par_collide){
        x += sign(xv);
    }
    xv = 0;
}

x += xv;
    

if place_meeting(x, y + yv, par_collide){
    while !place_meeting(x, y + sign(yv), par_collide){
        y += sign(yv);
    }
    yv = 0;
}
//collide with platforms
var_inst = instance_place(x, y + yv, obj_platform);
if var_inst != noone &amp;&amp; var_inst.y &gt; y &amp;&amp; !keyboard_check(bt_down){
    while !place_meeting(x, y + sign(yv), par_platform){
        y += sign(yv);
    }
    yv = 0;
    standing = true;
}

y += yv;
*/
//check for damaging objects
if(place_meeting(x, y, par_death) || place_meeting(x, y, par_collide)){
    part_particles_create_color(pt_sys, x, y, pt_death, color,50);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
//flip image to simulate turning
if image_xscale != sign(xv) &amp;&amp; sign(xv) != 0{
    image_xscale = sign(xv);
}

//set the apropraite sprite
if sliding{
    sprite_index = spr_player_sliding;
}else if standing{
    if xv = 0{
        sprite_index = spr_player_idle;
    }else if abs(xv) &lt; spd/2{
        image_speed = 0.5
        sprite_index = spr_player_walking;
    }else{
        image_speed = 1;
        sprite_index = spr_player_running;
    }
}else{
    if wall != 0{
        sprite_index  = spr_player_wall_slide;
    }else if yv &lt; -2{
        sprite_index  = spr_player_jumping;
    }else{
        sprite_index = spr_player_falling;
    }  
}

//adjust light position
player_light.x = x;
player_light.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_stretched(spr_heart_container, hp - 1, view_wport[0]/4, view_hport[0]-sprite_get_height(spr_heart_container)*4, sprite_get_width(spr_heart_container)*2, sprite_get_height(spr_heart_container)*2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
