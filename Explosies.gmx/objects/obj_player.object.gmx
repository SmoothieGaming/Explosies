<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables
acc = 350;
max_xv = 6;
jump_force = -150;
hp = 3;
max_jump_frames = 10;
wall_slide_speed = 1;
telekinesis_force = 10;
telekinesis_range = 100;
telekinesis_stamina = 60;
telekinesis_recovery = 1;

xv = 0;
yv = 0;
standing = 0;
sliding = 0;
wall = 0;
telekinesis_exhaustion = 0;
target_id = noone;

phy_fixed_rotation = true;

//initialize controls
bt_right = ord('D');
bt_left = ord('A');
bt_up = ord('W');
bt_down = ord('S');

//create light source at player;
player_light = instance_create(x, y, obj_light);
with player_light{
    //set light radius to the range of the player telekinesis
    radius = obj_player.telekinesis_range;
    surface_resize(lightsurface, radius*2, radius*2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics based movement
//don't execute if game is paused
if pause{
    exit;
}

//check for player input
var x_input = keyboard_check(bt_right) - keyboard_check(bt_left);
var y_input = keyboard_check(bt_down) - keyboard_check(bt_up);

wall = place_meeting(x + 1, y, par_collide) -place_meeting(x - 1, y, par_collide);
standing = place_meeting(x, y + 1, par_collide)

if wall != 0 &amp;&amp; phy_speed_y &gt; wall_slide_speed{
    phy_speed_y = wall_slide_speed;
}
physics_apply_force(x, y, x_input*acc, 0);

if abs(phy_speed_x) &gt; abs( max_xv){
    phy_speed_x = max_xv*sign(phy_speed_x);
}

if keyboard_check_pressed(bt_up){
    if standing{
        physics_apply_impulse(x, y, 0, jump_force);
        part_particles_create(partsys, x , y  + sprite_get_width(spr_player)/2, part_dust, 20);
    }else if wall != 0{
        physics_apply_impulse(x, y, acc*-wall, jump_force*0.75);
        part_particles_create(partsys, x + wall*sprite_get_width(spr_player)/2, y, part_dust, 20);
    }
}

if place_meeting(x, y, par_death){
    hp -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animate
//flip image to simulate turning
if image_xscale != sign(phy_speed_x) &amp;&amp; sign(phy_speed_x) != 0{
    image_xscale = sign(phy_speed_x);
}

//set the apropraite sprite
if sliding{
    sprite_index = spr_player_sliding;
}else if standing{
    if xv = 0{
        sprite_index = spr_player_idle;
    }else if abs(xv) &lt; spd/2{
        image_speed = 0.5
        sprite_index = spr_player_walking;
    }else{
        image_speed = 1;
        sprite_index = spr_player_running;
    }
}else{
    if wall != 0{
        image_xscale = wall;
        sprite_index  = spr_player_wall_slide;
        part_particles_create(partsys, x + wall*sprite_get_width(spr_player)/2, y, part_dust, 1);
    }else if yv &lt; -2{
        sprite_index  = spr_player_jumping;
    }else{
        sprite_index = spr_player_falling;
    }  
}

//adjust light position
player_light.x = x;
player_light.y = y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///telekinesis code
//make it darker when using telekinesis
if mouse_check_button(mb_left){
    if brightness &gt; 0.3 {
        brightness -= 0.01;
    }
}else{
    if brightness &lt; 0.8{
        brightness += 0.01
    }
}

//check if mouse is within range
if distance_to_point(mouse_x, mouse_y) &gt; telekinesis_range{
    target_id = noone;
    exit;
}

//pick up object
if mouse_check_button_pressed(mb_left) = true{
    target_id = instance_position( mouse_x, mouse_y, obj_phy_box)
}

//release object
if mouse_check_button_released(mb_left) = true{
    target_id = noone;
}

//move object
if target_id != noone &amp;&amp; telekinesis_exhaustion &lt; telekinesis_stamina{
    telekinesis_exhaustion += 1;
    with target_id{
        physics_apply_force(x, y, (mouse_x-x-(sprite_get_width(sprite_index)/2))*obj_player.telekinesis_force, (mouse_y-y-sprite_get_height(sprite_index))*obj_player.telekinesis_force);
    }
}else{
    target_id = noone;
    telekinesis_exhaustion -= telekinesis_recovery;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw health and telekinesis meter

//draw health meter
draw_sprite_stretched(spr_telekinesis_meter_container, 1, (view_wport[0]/4)+sprite_get_width(spr_health_meter_container)*4, view_hport[0]-sprite_get_height(spr_telekinesis_meter_container)*4, sprite_get_width(spr_telekinesis_meter_container)*4, sprite_get_height(spr_telekinesis_meter_container)*4)

//draw telekinesis meter
draw_sprite_stretched(spr_health_meter_container, 1, view_wport[0]/4, view_hport[0]-sprite_get_height(spr_health_meter_container)*4, sprite_get_width(spr_health_meter_container)*4, sprite_get_height( spr_health_meter_container )*4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>1</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
